{"version":3,"file":"static/js/184.a7647017.chunk.js","mappings":"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","sources":["pages/AdminEmployeeDetails.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst AdminEmployeeDetails = () => {\r\n  const [formId, setFormId] = useState(null);\r\n  const [responses, setResponses] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const formTitle = 'Employee Registration Form'; // Adjust if different\r\n\r\n  useEffect(() => {\r\n    const fetchFormId = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:4000/api/admin/formIdByTitle', { params: { title: formTitle } });\r\n        setFormId(res.data.formId);\r\n      } catch (err) {\r\n        setError('Failed to fetch form ID');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchFormId();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!formId) return;\r\n    const fetchResponses = async () => {\r\n      try {\r\n        const res = await axios.get(`/api/responses/form/${formId}`);\r\n        setResponses(res.data);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setError('Failed to fetch responses');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchResponses();\r\n  }, [formId]);\r\n\r\n  const exportToExcel = () => {\r\n    if (responses.length === 0) return;\r\n\r\n    // Flatten responses for Excel export\r\n    const data = responses.map((response) => {\r\n      const obj = {};\r\n      response.answers.forEach((answer) => {\r\n        obj[answer.questionId] = answer.value;\r\n      });\r\n      obj['Respondent Email'] = response.respondentEmail || '';\r\n      obj['IP Address'] = response.ipAddress || '';\r\n      obj['User Agent'] = response.userAgent || '';\r\n      obj['Start Time'] = response.startTime || '';\r\n      obj['End Time'] = response.endTime || '';\r\n      return obj;\r\n    });\r\n\r\n    const worksheet = XLSX.utils.json_to_sheet(data);\r\n    const workbook = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'EmployeeDetails');\r\n    XLSX.writeFile(workbook, 'EmployeeDetails.xlsx');\r\n  };\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <h2>Employee Registration Details</h2>\r\n      <button onClick={exportToExcel} style={{ marginBottom: 10 }}>\r\n        Export to Excel\r\n      </button>\r\n      <table border=\"1\" cellPadding=\"5\" cellSpacing=\"0\" style={{ width: '100%', borderCollapse: 'collapse' }}>\r\n        <thead>\r\n          <tr>\r\n            <th>Respondent Email</th>\r\n            <th>IP Address</th>\r\n            <th>User Agent</th>\r\n            <th>Start Time</th>\r\n            <th>End Time</th>\r\n            {/* Dynamically add question columns */}\r\n            {responses.length > 0 &&\r\n              Object.keys(\r\n                responses[0].answers.reduce((acc, answer) => {\r\n                  acc[answer.questionId] = true;\r\n                  return acc;\r\n                }, {})\r\n              ).map((qid) => (\r\n                <th key={qid}>{qid}</th>\r\n              ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {responses.map((response) => (\r\n            <tr key={response._id}>\r\n              <td>{response.respondentEmail || ''}</td>\r\n              <td>{response.ipAddress || ''}</td>\r\n              <td>{response.userAgent || ''}</td>\r\n              <td>{response.startTime ? new Date(response.startTime).toLocaleString() : ''}</td>\r\n              <td>{response.endTime ? new Date(response.endTime).toLocaleString() : ''}</td>\r\n              {Object.keys(\r\n                response.answers.reduce((acc, answer) => {\r\n                  acc[answer.questionId] = answer.value;\r\n                  return acc;\r\n                }, {})\r\n              ).map((qid) => {\r\n                const answer = response.answers.find((a) => a.questionId === qid);\r\n                return <td key={qid}>{answer ? answer.value : ''}</td>;\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AdminEmployeeDetails;\r\n"],"names":["AdminEmployeeDetails","formId","setFormId","useState","responses","setResponses","loading","setLoading","error","setError","useEffect","async","res","axios","get","params","title","data","err","fetchFormId","fetchResponses","_jsx","children","_jsxs","style","padding","onClick","exportToExcel","length","map","response","obj","answers","forEach","answer","questionId","value","respondentEmail","ipAddress","userAgent","startTime","endTime","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","marginBottom","border","cellPadding","cellSpacing","width","borderCollapse","Object","keys","reduce","acc","qid","Date","toLocaleString","find","a","_id"],"sourceRoot":""}