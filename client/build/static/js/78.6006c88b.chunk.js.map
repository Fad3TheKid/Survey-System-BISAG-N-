{"version":3,"file":"static/js/78.6006c88b.chunk.js","mappings":"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","sources":["pages/FormResponse.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Checkbox,\n  FormGroup,\n  Alert,\n  LinearProgress,\n  Slider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Avatar,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport { formService } from '../services/api';\n\nconst LOCAL_STORAGE_KEY = 'formResponseAutosave';\n\nfunction FormResponse() {\n  const { formId } = useParams();\n  const navigate = useNavigate();\n\n  const [form, setForm] = useState(null);\n  const [answers, setAnswers] = useState({});\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [submitted, setSubmitted] = useState(false);\n  const [validationErrors, setValidationErrors] = useState({});\n\n  // Load form and init answers + restore autosave\n  useEffect(() => {\n    const loadForm = async () => {\n      try {\n        setLoading(true);\n        const data = await formService.getForm(formId);\n        if (!data.questions) data.questions = [];\n\n        setForm(data);\n\n        // Init answers\n        const initialAnswers = {};\n        data.questions.forEach((q, idx) => {\n          switch (q.type) {\n            case 'checkbox':\n              initialAnswers[idx] = [];\n              break;\n            case 'grid':\n              initialAnswers[idx] = {};\n              break;\n            case 'file':\n              initialAnswers[idx] = null;\n              break;\n            case 'linear':\n              initialAnswers[idx] = 3;\n              break;\n            default:\n              initialAnswers[idx] = '';\n          }\n        });\n\n        // Load autosaved data if present\n        const saved = localStorage.getItem(LOCAL_STORAGE_KEY);\n        if (saved) {\n          const parsed = JSON.parse(saved);\n          if (parsed.formId === formId) {\n            // Merge answers and email carefully\n            Object.entries(parsed.answers || {}).forEach(([key, val]) => {\n              initialAnswers[key] = val;\n            });\n            if (parsed.email) setEmail(parsed.email);\n          }\n        }\n\n        setAnswers(initialAnswers);\n        setError(null);\n      } catch (err) {\n        setError('Failed to load form. Please try again later.');\n        console.error('Error loading form:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadForm();\n  }, [formId]);\n\n  // Autosave answers and email to localStorage\n  useEffect(() => {\n    if (!form) return;\n    const saveData = {\n      formId,\n      answers,\n      email,\n    };\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(saveData));\n  }, [answers, email, formId, form]);\n\n  // Clear autosave data (after submission or manual reset)\n  const clearAutosave = () => {\n    localStorage.removeItem(LOCAL_STORAGE_KEY);\n  };\n\n  // Handle changes for answers and clear validation error on change\n  const handleAnswerChange = (index, value) => {\n    setAnswers(prev => ({\n      ...prev,\n      [index]: value,\n    }));\n    setValidationErrors(prev => {\n      const copy = { ...prev };\n      delete copy[index];\n      return copy;\n    });\n  };\n\n  const handleCheckboxChange = (index, optionValue) => {\n    setAnswers(prev => {\n      const current = prev[index] || [];\n      let newArr;\n      if (current.includes(optionValue)) {\n        newArr = current.filter(v => v !== optionValue);\n      } else {\n        newArr = [...current, optionValue];\n      }\n      return {\n        ...prev,\n        [index]: newArr,\n      };\n    });\n    setValidationErrors(prev => {\n      const copy = { ...prev };\n      delete copy[index];\n      return copy;\n    });\n  };\n\n  // Remove selected file for a file question\n  const removeFile = (index) => {\n    handleAnswerChange(index, null);\n  };\n\n  // Validation helper\n  const validateAnswers = () => {\n    if (!form) return false;\n    const newErrors = {};\n\n    form.questions.forEach((q, idx) => {\n      const answer = answers[idx];\n      if (q.required) {\n        if (q.type === 'checkbox' && (!answer || answer.length === 0)) {\n          newErrors[idx] = `Please answer the required question: \"${q.title}\"`;\n        } else if (q.type === 'grid') {\n          // All rows must be answered\n          const answeredRows = Object.keys(answer || {}).length;\n          if (answeredRows !== (q.rows?.length || 0)) {\n            newErrors[idx] = `Please answer all rows for the required question: \"${q.title}\"`;\n          }\n        } else if (\n          q.type !== 'checkbox' &&\n          q.type !== 'grid' &&\n          (answer === undefined || answer === '' || answer === null)\n        ) {\n          newErrors[idx] = `Please answer the required question: \"${q.title}\"`;\n        }\n      }\n    });\n\n    if (form.settings?.collectEmail && !email) {\n      newErrors.email = 'Please provide your email address';\n    }\n\n    setValidationErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(null);\n\n    if (!validateAnswers()) return;\n\n    try {\n      // Prepare answers for submission (handle file if any)\n      const submittedAnswers = await Promise.all(\n        Object.entries(answers).map(async ([index, value]) => {\n          const question = form.questions[index];\n          if (question.type === 'file' && value instanceof File) {\n            // Simulate upload or prepare file (here we just send the filename)\n            // You can extend this to upload files to server or cloud storage\n            return {\n              questionId: question.id,\n              value: value.name,\n            };\n          } else {\n            return {\n              questionId: question.id,\n              value,\n            };\n          }\n        })\n      );\n\n      const response = {\n        formId,\n        answers: submittedAnswers,\n        respondentEmail: email || undefined,\n        submittedAt: new Date().toISOString(),\n      };\n\n      await formService.submitResponse(response);\n\n      setSubmitted(true);\n      setError(null);\n      clearAutosave();\n    } catch (err) {\n      setError('Failed to submit response. Please try again later.');\n      console.error('Error submitting response:', err);\n    }\n  };\n\n  // Reset form handler\n  const handleReset = () => {\n    if (!form) return;\n\n    const clearedAnswers = {};\n    form.questions.forEach((q, idx) => {\n      switch (q.type) {\n        case 'checkbox':\n          clearedAnswers[idx] = [];\n          break;\n        case 'grid':\n          clearedAnswers[idx] = {};\n          break;\n        case 'file':\n          clearedAnswers[idx] = null;\n          break;\n        case 'linear':\n          clearedAnswers[idx] = 3;\n          break;\n        default:\n          clearedAnswers[idx] = '';\n      }\n    });\n    setAnswers(clearedAnswers);\n    setEmail('');\n    setValidationErrors({});\n    setError(null);\n    setSubmitted(false);\n    clearAutosave();\n  };\n\n  // For file previews\n  const renderFilePreview = (file) => {\n    if (!file) return null;\n\n    if (file instanceof File) {\n      const isImage = file.type.startsWith('image/');\n      if (isImage) {\n        const url = URL.createObjectURL(file);\n        return <Avatar src={url} alt={file.name} variant=\"rounded\" sx={{ width: 56, height: 56, mr: 1 }} />;\n      }\n      return <Typography>{file.name}</Typography>;\n    } else if (typeof file === 'string') {\n      // Already uploaded or filename string\n      return <Typography>{file}</Typography>;\n    }\n\n    return null;\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: 4 }}>\n        <LinearProgress />\n      </Box>\n    );\n  }\n\n  if (error && !submitted) {\n    return (\n      <Alert severity=\"error\" sx={{ m: 4 }}>\n        {error}\n      </Alert>\n    );\n  }\n\n  if (submitted) {\n    return (\n      <Box sx={{ maxWidth: 600, mx: 'auto', p: 4, textAlign: 'center' }}>\n        <Alert severity=\"success\" sx={{ mb: 2 }}>\n          Thank you for your response!\n        </Alert>\n        <Button variant=\"contained\" onClick={() => navigate('/')}>\n          Back to Home\n        </Button>\n        <Button sx={{ ml: 2 }} color=\"secondary\" onClick={handleReset}>\n          Submit Another Response\n        </Button>\n      </Box>\n    );\n  }\n\n  const renderQuestion = (question, index) => {\n    const errorText = validationErrors[index];\n    switch (question.type) {\n      case 'short':\n        return (\n          <>\n            <TextField\n              fullWidth\n              value={answers[index] || ''}\n              onChange={(e) => handleAnswerChange(index, e.target.value)}\n              required={question.required}\n              error={!!errorText}\n              helperText={errorText}\n            />\n          </>\n        );\n      case 'paragraph':\n        return (\n          <TextField\n            fullWidth\n            multiline\n            rows={4}\n            value={answers[index] || ''}\n            onChange={(e) => handleAnswerChange(index, e.target.value)}\n            required={question.required}\n            error={!!errorText}\n            helperText={errorText}\n          />\n        );\n      case 'multiple':\n        return (\n          <RadioGroup\n            value={answers[index] || ''}\n            onChange={(e) => handleAnswerChange(index, e.target.value)}\n          >\n            {question.options?.map((option, i) => (\n              <FormControlLabel\n                key={i}\n                value={option}\n                control={<Radio required={question.required} />}\n                label={option}\n              />\n            ))}\n            {errorText && (\n              <Typography color=\"error\" variant=\"body2\" sx={{ mt: 0.5 }}>\n                {errorText}\n              </Typography>\n            )}\n          </RadioGroup>\n        );\n      case 'checkbox':\n        return (\n          <>\n            <FormGroup>\n              {question.options?.map((option, i) => (\n                <FormControlLabel\n                  key={i}\n                  control={\n                    <Checkbox\n                      checked={(answers[index] || []).includes(option)}\n                      onChange={() => handleCheckboxChange(index, option)}\n                    />\n                  }\n                  label={option}\n                />\n              ))}\n            </FormGroup>\n            {errorText && (\n              <Typography color=\"error\" variant=\"body2\" sx={{ mt: 0.5 }}>\n                {errorText}\n              </Typography>\n            )}\n          </>\n        );\n      case 'file':\n        return (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flexWrap: 'wrap' }}>\n            <input\n              type=\"file\"\n              onChange={(e) => {\n                const file = e.target.files[0];\n                handleAnswerChange(index, file);\n              }}\n              required={question.required}\n            />\n            {answers[index] && (\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                {renderFilePreview(answers[index])}\n                <Tooltip title=\"Remove file\">\n                  <IconButton size=\"small\" onClick={() => removeFile(index)}>\n                    <ClearIcon />\n                  </IconButton>\n                </Tooltip>\n              </Box>\n            )}\n            {errorText && (\n              <Typography color=\"error\" variant=\"body2\" sx={{ mt: 0.5 }}>\n                {errorText}\n              </Typography>\n            )}\n          </Box>\n        );\n      case 'dropdown':\n        return (\n          <>\n            <TextField\n              select\n              SelectProps={{ native: true }}\n              value={answers[index] || ''}\n              onChange={(e) => handleAnswerChange(index, e.target.value)}\n              required={question.required}\n              error={!!errorText}\n              helperText={errorText}\n            >\n              <option value=\"\" disabled>\n                Select...\n              </option>\n              {question.options?.map((option, i) => (\n                <option key={i} value={option}>\n                  {option}\n                </option>\n              ))}\n            </TextField>\n          </>\n        );\n      case 'linear':\n        return (\n          <>\n            <Slider\n              value={answers[index] || 3}\n              min={question.scaleMin || 1}\n              max={question.scaleMax || 5}\n              step={1}\n              marks\n              valueLabelDisplay=\"auto\"\n              onChange={(e, value) => handleAnswerChange(index, value)}\n              aria-labelledby=\"linear-scale-slider\"\n            />\n            {errorText && (\n              <Typography color=\"error\" variant=\"body2\" sx={{ mt: 0.5 }}>\n                {errorText}\n              </Typography>\n            )}\n          </>\n        );\n      case 'grid':\n        return (\n          <>\n            <Table size=\"small\" sx={{ maxWidth: 600 }}>\n              <TableHead>\n                <TableRow>\n                  <TableCell />\n                  {question.columns?.map((col, i) => (\n                    <TableCell key={i} align=\"center\">\n                      {col}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {question.rows?.map((row, rIdx) => (\n                  <TableRow key={rIdx}>\n                    <TableCell>{row}</TableCell>\n                    {question.columns.map((col, cIdx) => (\n                      <TableCell key={cIdx} align=\"center\">\n                        <Radio\n                          checked={answers[index]?.[row] === col}\n                          onChange={() => {\n                            const updated = { ...(answers[index] || {}) };\n                            updated[row] = col;\n                            handleAnswerChange(index, updated);\n                          }}\n                          value={col}\n                          name={`grid-${index}-${row}`}\n                          required={question.required}\n                        />\n                      </TableCell>\n                    ))}\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            {errorText && (\n              <Typography color=\"error\" variant=\"body2\" sx={{ mt: 0.5 }}>\n                {errorText}\n              </Typography>\n            )}\n          </>\n        );\n      default:\n        return <Typography>Unsupported question type: {question.type}</Typography>;\n    }\n  };\n\n  return (\n    <Box sx={{ maxWidth: 700, mx: 'auto', p: 3 }}>\n      <Paper sx={{ p: 4 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          {form.title || 'Form'}\n        </Typography>\n        {form.settings?.description && (\n          <Typography variant=\"body1\" sx={{ mb: 3 }}>\n            {form.settings.description}\n          </Typography>\n        )}\n\n        <form onSubmit={handleSubmit} noValidate>\n          {form.settings?.collectEmail && (\n            <TextField\n              label=\"Your Email\"\n              type=\"email\"\n              fullWidth\n              required\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n                setValidationErrors(prev => {\n                  const copy = { ...prev };\n                  delete copy.email;\n                  return copy;\n                });\n              }}\n              error={!!validationErrors.email}\n              helperText={validationErrors.email}\n              sx={{ mb: 3 }}\n            />\n          )}\n\n          {form.questions.map((q, idx) => (\n            <Box key={idx} sx={{ mb: 4 }}>\n              <Typography variant=\"h6\" sx={{ mb: 1 }}>\n                {q.title} {q.required && '*'}\n              </Typography>\n              {renderQuestion(q, idx)}\n            </Box>\n          ))}\n\n          {error && (\n            <Alert severity=\"error\" sx={{ mb: 2 }}>\n              {error}\n            </Alert>\n          )}\n\n          <Box sx={{ display: 'flex', gap: 2 }}>\n            <Button variant=\"contained\" type=\"submit\">\n              Submit\n            </Button>\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleReset}>\n              Reset Form\n            </Button>\n          </Box>\n        </form>\n      </Paper>\n    </Box>\n  );\n}\n\nexport default FormResponse;\n"],"names":["LOCAL_STORAGE_KEY","_form$settings2","_form$settings3","formId","useParams","navigate","useNavigate","form","setForm","useState","answers","setAnswers","email","setEmail","loading","setLoading","error","setError","submitted","setSubmitted","validationErrors","setValidationErrors","useEffect","async","data","formService","getForm","questions","initialAnswers","forEach","q","idx","type","saved","localStorage","getItem","parsed","JSON","parse","Object","entries","_ref","key","val","err","console","loadForm","saveData","setItem","stringify","clearAutosave","removeItem","handleAnswerChange","index","value","prev","copy","handleReset","clearedAnswers","renderFilePreview","file","File","startsWith","url","URL","createObjectURL","_jsx","Avatar","src","alt","name","variant","sx","width","height","mr","Typography","children","Box","p","LinearProgress","Alert","severity","m","_jsxs","maxWidth","mx","textAlign","mb","Button","onClick","ml","color","renderQuestion","question","_question$options","_question$options2","_question$options3","_question$columns","_question$rows","errorText","_Fragment","TextField","fullWidth","onChange","e","target","required","helperText","multiline","rows","RadioGroup","options","map","option","i","FormControlLabel","control","Radio","label","mt","FormGroup","Checkbox","checked","includes","handleCheckboxChange","optionValue","current","newArr","filter","v","display","alignItems","gap","flexWrap","files","Tooltip","title","IconButton","size","removeFile","ClearIcon","select","SelectProps","native","disabled","Slider","min","scaleMin","max","scaleMax","step","marks","valueLabelDisplay","Table","TableHead","TableRow","TableCell","columns","col","align","TableBody","row","rIdx","cIdx","_answers$index","updated","Paper","gutterBottom","settings","description","onSubmit","preventDefault","validateAnswers","_form$settings","newErrors","answer","length","_q$rows","keys","undefined","collectEmail","submittedAnswers","Promise","all","_ref2","questionId","id","response","respondentEmail","submittedAt","Date","toISOString","submitResponse","noValidate"],"sourceRoot":""}