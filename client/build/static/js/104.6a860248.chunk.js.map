{"version":3,"file":"static/js/104.6a860248.chunk.js","mappings":"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","sources":["pages/FormView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { formService, authService } from '../services/api';\nimport {\n  Box,\n  Typography,\n  Button,\n  TextField,\n  Checkbox,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  FormLabel,\n  FormGroup,\n  Select,\n  MenuItem,\n} from '@mui/material';\n\nconst FormView = () => {\n  const { formId } = useParams();\n  const navigate = useNavigate();\n\n  const [form, setForm] = useState(null);\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [userEmail, setUserEmail] = useState('');\n\n  useEffect(() => {\n    const fetchForm = async () => {\n      try {\n        const data = await formService.getForm(formId);\n        console.log('Fetched form data:', data);\n        setForm(data);\n      } catch (error) {\n        console.error('Failed to load form:', error);\n        alert('Failed to load form: ' + error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchForm();\n\n    const fetchUserProfile = async () => {\n      try {\n        const profile = await authService.getProfile();\n        setUserEmail(profile.email || '');\n      } catch (error) {\n        console.error('Failed to fetch user profile:', error);\n      }\n    };\n    fetchUserProfile();\n  }, [formId]);\n\n  const handleChange = (questionId, value) => {\n    setResponses((prev) => ({\n      ...prev,\n      [questionId]: value,\n    }));\n  };\n\n  const handleSubmit = async () => {\n    setSubmitLoading(true);\n    try {\n      // Transform responses object into array of answer objects\n      const answersArray = form.questions.map((question) => ({\n        questionId: question._id,\n        type: question.type,\n        value: responses[question._id] || '',\n        timestamp: new Date(),\n      }));\n\n      const responsePayload = {\n        formId,\n        answers: answersArray,\n        respondentEmail: userEmail,\n      };\n      await formService.submitResponse(responsePayload);\n      alert('Response submitted successfully!');\n      navigate('/fill-surveys'); // Navigate back to Fill Surveys page after submission\n    } catch (error) {\n      alert('Failed to submit response: ' + error);\n    } finally {\n      setSubmitLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <Typography>Loading form...</Typography>;\n  }\n\n  if (!form) {\n    // Redirect to employee dashboard if form not found\n    window.location.href = '/employee-dashboard';\n    return null;\n  }\n\n  return (\n    <Box sx={{ maxWidth: 600, margin: 'auto', padding: 3 }}>\n      <Typography variant=\"h4\" gutterBottom>{form.title}</Typography>\n      <Typography variant=\"subtitle1\" gutterBottom>{form.description}</Typography>\n\n      {form.questions.map((question) => {\n        const value = responses[question._id] || '';\n\n        switch (question.type) {\n          case 'short':\n          case 'email':\n          case 'number':\n          case 'phone':\n          case 'url':\n            return (\n              <Box key={question._id} sx={{ mb: 3 }}>\n                <TextField\n                  label={question.title}\n                  type={question.type === 'short' ? 'text' : question.type}\n                  value={value}\n                  onChange={(e) => handleChange(question._id, e.target.value)}\n                  fullWidth\n                  required={question.required}\n                />\n              </Box>\n            );\n          case 'paragraph':\n            return (\n              <Box key={question._id} sx={{ mb: 3 }}>\n                <TextField\n                  label={question.title}\n                  multiline\n                  rows={4}\n                  value={value}\n                  onChange={(e) => handleChange(question._id, e.target.value)}\n                  fullWidth\n                  required={question.required}\n                />\n              </Box>\n            );\n          case 'multiple':\n            return (\n              <Box key={question._id} sx={{ mb: 3 }}>\n                <FormLabel>{question.title}</FormLabel>\n                <RadioGroup\n                  value={value}\n                  onChange={(e) => handleChange(question._id, e.target.value)}\n                >\n                  {question.options.map((option) => (\n                    <FormControlLabel\n                      key={option.value}\n                      value={option.value}\n                      control={<Radio required={question.required} />}\n                      label={option.text}\n                    />\n                  ))}\n                </RadioGroup>\n              </Box>\n            );\n          case 'checkbox':\n            return (\n              <Box key={question._id} sx={{ mb: 3 }}>\n                <FormLabel>{question.title}</FormLabel>\n                <FormGroup>\n                  {question.options.map((option) => (\n                    <FormControlLabel\n                      key={option.value}\n                      control={\n                        <Checkbox\n                          checked={Array.isArray(value) ? value.includes(option.value) : false}\n                          onChange={(e) => {\n                            let newValue = Array.isArray(value) ? [...value] : [];\n                            if (e.target.checked) {\n                              newValue.push(option.value);\n                            } else {\n                              newValue = newValue.filter((v) => v !== option.value);\n                            }\n                            handleChange(question._id, newValue);\n                          }}\n                        />\n                      }\n                      label={option.text}\n                    />\n                  ))}\n                </FormGroup>\n              </Box>\n            );\n          case 'dropdown':\n            return (\n              <Box key={question._id} sx={{ mb: 3 }}>\n                <FormLabel>{question.title}</FormLabel>\n                <Select\n                  value={value}\n                  onChange={(e) => handleChange(question._id, e.target.value)}\n                  fullWidth\n                  required={question.required}\n                >\n                  {question.options.map((option) => (\n                    <MenuItem key={option.value} value={option.value}>\n                      {option.text}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </Box>\n            );\n          default:\n            return null;\n        }\n      })}\n\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleSubmit}\n        disabled={submitLoading}\n      >\n        {submitLoading ? 'Submitting...' : 'Submit'}\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        sx={{ ml: 2 }}\n        onClick={() => {\n          window.location.href = '/fill-surveys';\n        }}\n      >\n        Back\n      </Button>\n    </Box>\n  );\n};\n\nexport default FormView;"],"names":["FormView","formId","useParams","navigate","useNavigate","form","setForm","useState","responses","setResponses","loading","setLoading","submitLoading","setSubmitLoading","userEmail","setUserEmail","useEffect","async","data","formService","getForm","console","log","error","alert","fetchForm","profile","authService","getProfile","email","fetchUserProfile","handleChange","questionId","value","prev","_jsx","Typography","children","_jsxs","Box","sx","maxWidth","margin","padding","variant","gutterBottom","title","description","questions","map","question","_id","type","mb","TextField","label","onChange","e","target","fullWidth","required","multiline","rows","FormLabel","RadioGroup","options","option","FormControlLabel","control","Radio","text","FormGroup","Checkbox","checked","Array","isArray","includes","newValue","push","filter","v","Select","MenuItem","Button","color","onClick","answersArray","timestamp","Date","responsePayload","answers","respondentEmail","submitResponse","disabled","ml","window","location","href"],"sourceRoot":""}