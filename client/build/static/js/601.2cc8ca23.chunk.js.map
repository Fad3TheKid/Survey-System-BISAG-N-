{"version":3,"file":"static/js/601.2cc8ca23.chunk.js","mappings":"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","sources":["pages/ResponseView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  Box,\n  Paper,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Tabs,\n  Tab,\n  CircularProgress,\n  Alert,\n  Card,\n  CardContent,\n  Grid,\n} from '@mui/material';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\n// import { formService } from '../services/api'; // Uncomment when ready for real API\n\nconst COLORS = ['#673AB7', '#3F51B5', '#2196F3', '#03A9F4', '#00BCD4'];\n\nconst mockForm = {\n  title: 'Sample Survey',\n  questions: [\n    { id: 'q1', title: 'Favorite Color', type: 'multiple' },\n    { id: 'q2', title: 'Upload your file', type: 'file' },\n    { id: 'q3', title: 'Rate our service', type: 'linear' },\n  ],\n};\n\nconst mockResponses = [\n  {\n    createdAt: '2025-05-27T10:00:00Z',\n    respondentEmail: 'user1@example.com',\n    answers: [\n      { questionId: 'q1', value: 'Blue' },\n      { questionId: 'q2', value: [{ value: 'file1.pdf' }, { value: 'file2.jpg' }] },\n      { questionId: 'q3', value: 4 },\n    ],\n  },\n  {\n    createdAt: '2025-05-27T11:00:00Z',\n    respondentEmail: 'user2@example.com',\n    answers: [\n      { questionId: 'q1', value: 'Red' },\n      { questionId: 'q2', value: 'singlefile.docx' },\n      { questionId: 'q3', value: 5 },\n    ],\n  },\n];\n\nfunction ResponseView() {\n  const { formId } = useParams();\n  const [form, setForm] = useState(null);\n  const [responses, setResponses] = useState([]);\n  const [stats, setStats] = useState(null);\n  const [activeTab, setActiveTab] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Temporary mock data load for testing\n    setForm(mockForm);\n    setResponses(mockResponses);\n    setStats({\n      totalResponses: mockResponses.length,\n      averageDuration: 180, // seconds\n      questionStats: {\n        q1: { answerDistribution: { Blue: 1, Red: 1 } },\n        q2: { answerDistribution: { 'file1.pdf': 1, 'file2.jpg': 1, 'singlefile.docx': 1 } },\n        q3: { answerDistribution: { 4: 1, 5: 1 } },\n      },\n    });\n    setLoading(false);\n\n    // Real API loading code example:\n    /*\n    if (!formId) return;\n    loadData();\n    */\n  }, [formId]);\n\n  /*\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      const [formData, responsesData, statsData] = await Promise.all([\n        formService.getForm(formId),\n        formService.getResponses(formId),\n        formService.getResponseStats(formId),\n      ]);\n      setForm(formData);\n      setResponses(responsesData);\n      setStats(statsData);\n      setError(null);\n    } catch (err) {\n      setError('Failed to load responses');\n      console.error('Error loading responses:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  */\n\n  const renderSummary = () => {\n    if (!stats || !form) return null;\n\n    return (\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">Total Responses</Typography>\n              <Typography variant=\"h3\">{stats.totalResponses}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">Average Duration</Typography>\n              <Typography variant=\"h3\">{Math.round(stats.averageDuration / 60)} min</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          {form.questions.map((question) => (\n            <Paper key={question.id} sx={{ p: 3, mb: 2 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                {question.title}\n              </Typography>\n              {renderQuestionStats(question, stats.questionStats[question.id])}\n            </Paper>\n          ))}\n        </Grid>\n      </Grid>\n    );\n  };\n\n  const renderQuestionStats = (question, questionStats) => {\n    if (!questionStats) return <Typography>No data</Typography>;\n\n    const data = Object.entries(questionStats.answerDistribution).map(([name, value]) => ({\n      name,\n      value,\n    }));\n\n    switch (question.type) {\n      case 'multiple':\n      case 'checkbox':\n      case 'linear':\n        return (\n          <Box sx={{ height: 300 }}>\n            <ResponsiveContainer>\n              <BarChart data={data}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Bar dataKey=\"value\" fill=\"#673AB7\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </Box>\n        );\n\n      default:\n        return (\n          <Box sx={{ height: 300 }}>\n            <ResponsiveContainer>\n              <PieChart>\n                <Pie data={data} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\">\n                  {data.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </Box>\n        );\n    }\n  };\n\n  const renderResponses = () => {\n    if (!form || !responses.length) return <Typography>No responses found.</Typography>;\n\n    return (\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Timestamp</TableCell>\n              <TableCell>Email</TableCell>\n              {form.questions.map((question) => (\n                <TableCell key={question.id}>{question.title}</TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {responses.map((response, idx) => (\n              <TableRow key={idx}>\n                <TableCell>{new Date(response.createdAt).toLocaleString()}</TableCell>\n                <TableCell>{response.respondentEmail || '-'}</TableCell>\n                {form.questions.map((question) => {\n                  const answer = response.answers.find((a) => a.questionId === question.id);\n                  return <TableCell key={question.id}>{renderResponseValue(answer?.value, question.type)}</TableCell>;\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  };\n\n  const renderResponseValue = (value, questionType) => {\n    if (value === undefined || value === null || (typeof value === 'string' && value.trim() === '')) return '-';\n\n    if (questionType === 'file') {\n      if (Array.isArray(value)) {\n        if (value.length > 0 && typeof value[0] === 'object' && 'value' in value[0]) {\n          return value.map((fileObj) => fileObj.value).join(', ');\n        }\n        return value.join(', ');\n      }\n      if (typeof value === 'string') {\n        return value;\n      }\n      if (value instanceof File) {\n        return value.name;\n      }\n    }\n\n    if (questionType === 'grid' && typeof value === 'object') {\n      return Object.entries(value)\n        .map(([row, column]) => `${row}: ${column}`)\n        .join(', ');\n    }\n\n    if (Array.isArray(value)) return value.join(', ');\n\n    return value.toString();\n  };\n\n  if (loading) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"60vh\">\n        <CircularProgress />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\">{error}</Alert>\n      </Box>\n    );\n  }\n\n  if (!form) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\">Form not found</Alert>\n      </Box>\n    );\n  }\n\n  return (\n    <Box sx={{ maxWidth: 1200, mx: 'auto', py: 4 }}>\n      <Typography variant=\"h4\" gutterBottom>\n        {form.title} - Responses\n      </Typography>\n\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)}>\n          <Tab label=\"Summary\" />\n          <Tab label=\"Individual Responses\" />\n        </Tabs>\n      </Box>\n\n      {activeTab === 0 ? renderSummary() : renderResponses()}\n    </Box>\n  );\n}\n\nexport default ResponseView;\n"],"names":["COLORS","mockForm","title","questions","id","type","mockResponses","createdAt","respondentEmail","answers","questionId","value","formId","useParams","form","setForm","useState","responses","setResponses","stats","setStats","activeTab","setActiveTab","loading","setLoading","error","setError","useEffect","totalResponses","length","averageDuration","questionStats","q1","answerDistribution","Blue","Red","q2","q3","renderQuestionStats","question","_jsx","Typography","children","data","Object","entries","map","_ref","name","Box","sx","height","ResponsiveContainer","_jsxs","BarChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Bar","fill","PieChart","Pie","nameKey","cx","cy","outerRadius","entry","index","Cell","renderResponseValue","questionType","undefined","trim","Array","isArray","fileObj","join","File","_ref2","row","column","toString","display","justifyContent","alignItems","minHeight","CircularProgress","p","Alert","severity","maxWidth","mx","py","variant","gutterBottom","borderBottom","borderColor","mb","Tabs","onChange","e","newValue","Tab","label","Grid","container","spacing","item","xs","md","Card","CardContent","Math","round","Paper","TableContainer","component","Table","TableHead","TableRow","TableCell","TableBody","response","idx","Date","toLocaleString","answer","find","a"],"sourceRoot":""}