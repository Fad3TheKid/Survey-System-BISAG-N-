{"version":3,"file":"static/js/249.f2ebc4fb.chunk.js","mappings":"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","sources":["components/QuestionCard.js","pages/FormBuilderNew.js","pages/FormBuilder.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Paper,\n  TextField,\n  IconButton,\n  FormControlLabel,\n  Checkbox,\n  Menu,\n  MenuItem,\n  Box,\n  Typography,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Tooltip,\n  ListItemIcon,\n  ListItemText,\n  Switch as MuiSwitch,\n} from '@mui/material';\nimport {\n  Delete as DeleteIcon,\n  DragIndicator as DragIcon,\n  Add as AddIcon,\n  ContentCopy as DuplicateIcon,\n  Image as ImageIcon,\n  VideoLibrary as VideoIcon,\n  ViewModule as SectionIcon,\n  ShortText as ShortTextIcon,\n  Subject as SubjectIcon,\n  RadioButtonChecked as RadioButtonCheckedIcon,\n  CheckBox as CheckBoxIcon,\n  ArrowDropDownCircle as ArrowDropDownCircleIcon,\n  CloudUpload as CloudUploadIcon,\n  LinearScale as LinearScaleIcon,\n  StarBorder as StarBorderIcon,\n  GridView as GridViewIcon,\n  CalendarToday as CalendarTodayIcon,\n  AccessTime as AccessTimeIcon,\n} from '@mui/icons-material';\n\nconst questionTypesGrouped = [\n  {\n    groupName: '',\n    types: [\n      { value: 'short', label: 'Short answer', icon: <ShortTextIcon fontSize=\"small\" /> },\n      { value: 'paragraph', label: 'Paragraph', icon: <SubjectIcon fontSize=\"small\" /> },\n    ],\n  },\n  {\n    groupName: '',\n    types: [\n      { value: 'multiple', label: 'Multiple choice', icon: <RadioButtonCheckedIcon fontSize=\"small\" /> },\n      { value: 'checkbox', label: 'Checkboxes', icon: <CheckBoxIcon fontSize=\"small\" /> },\n      { value: 'dropdown', label: 'Dropdown', icon: <ArrowDropDownCircleIcon fontSize=\"small\" /> },\n      { value: 'file', label: 'File upload', icon: <CloudUploadIcon fontSize=\"small\" /> },\n    ],\n  },\n  {\n    groupName: '',\n    types: [\n      { value: 'linear', label: 'Linear scale', icon: <LinearScaleIcon fontSize=\"small\" /> },\n      { value: 'rating', label: 'Rating', icon: <StarBorderIcon fontSize=\"small\" />, isNew: true },\n      { value: 'multipleGrid', label: 'Multiple choice grid', icon: <GridViewIcon fontSize=\"small\" /> },\n      { value: 'checkboxGrid', label: 'Checkbox grid', icon: <GridViewIcon fontSize=\"small\" /> },\n    ],\n  },\n  {\n    groupName: '',\n    types: [\n      { value: 'date', label: 'Date', icon: <CalendarTodayIcon fontSize=\"small\" /> },\n      { value: 'time', label: 'Time', icon: <AccessTimeIcon fontSize=\"small\" /> },\n    ],\n  },\n];\n\nfunction QuestionCard({ question, index, onUpdate, onDelete, onDuplicate, selected, onSelect }) {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleTypeChange = (value) => {\n    console.log('handleTypeChange called with value:', value);\n    onUpdate({ ...question, type: value });\n    handleMenuClose();\n  };\n\n  const handleChange = (field, value) => {\n    onUpdate({ ...question, [field]: value });\n  };\n\n  const handleNestedChange = (field, value) => {\n    onUpdate({ ...question, [field]: value });\n  };\n\n  const renderOptions = () => {\n    if (!['multiple', 'checkbox', 'dropdown'].includes(question.type)) return null;\n\n    const addOption = () => handleChange('options', [...(question.options || []), '']);\n    const updateOption = (i, val) => handleChange('options', question.options.map((o, idx) => idx === i ? val : o));\n    const deleteOption = (i) => handleChange('options', question.options.filter((_, idx) => idx !== i));\n\n    return (\n      <Box sx={{ mt: 2 }}>\n        {question.options?.map((option, i) => (\n          <Box key={i} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n            <Typography sx={{ mr: 2 }}>{question.type === 'multiple' ? '○' : '□'}</Typography>\n            <TextField\n              value={option}\n              onChange={(e) => updateOption(i, e.target.value)}\n              placeholder={`Option ${i + 1}`}\n              fullWidth\n              size=\"small\"\n            />\n            <Tooltip title=\"Delete Option\"><IconButton size=\"small\" onClick={() => deleteOption(i)}><DeleteIcon fontSize=\"small\" /></IconButton></Tooltip>\n          </Box>\n        ))}\n        <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n          <Button startIcon={<AddIcon />} onClick={addOption} size=\"small\" sx={{ mt: 1 }}>\n            Add Option\n          </Button>\n          <Button size=\"small\" sx={{ mt: 1, textTransform: 'none', color: '#1a73e8' }} onClick={() => addOption()}>\n            add \"Other\"\n          </Button>\n        </Box>\n      </Box>\n    );\n  };\n\n  const renderLinearScale = () => {\n    if (question.type !== 'linear') return null;\n    return (\n      <Box sx={{ mt: 2 }}>\n        <Box sx={{ display: 'flex', gap: 2 }}>\n          <TextField\n            label=\"Min value\"\n            type=\"number\"\n            value={question.min || 1}\n            onChange={(e) => handleChange('min', e.target.value)}\n            size=\"small\"\n          />\n          <TextField\n            label=\"Max value\"\n            type=\"number\"\n            value={question.max || 5}\n            onChange={(e) => handleChange('max', e.target.value)}\n            size=\"small\"\n          />\n        </Box>\n        <Box sx={{ display: 'flex', gap: 2, mt: 2 }}>\n          <TextField\n            label=\"Min label\"\n            value={question.minLabel || ''}\n            onChange={(e) => handleChange('minLabel', e.target.value)}\n            size=\"small\"\n            fullWidth\n          />\n          <TextField\n            label=\"Max label\"\n            value={question.maxLabel || ''}\n            onChange={(e) => handleChange('maxLabel', e.target.value)}\n            size=\"small\"\n            fullWidth\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  const renderGrid = () => {\n    if (question.type !== 'grid') return null;\n\n    const addRow = () => handleNestedChange('rows', [...(question.rows || []), `Row ${question.rows?.length + 1 || 1}`]);\n    const addColumn = () => handleNestedChange('columns', [...(question.columns || []), `Column ${question.columns?.length + 1 || 1}`]);\n    const updateRow = (i, val) => handleNestedChange('rows', question.rows.map((r, idx) => idx === i ? val : r));\n    const updateColumn = (i, val) => handleNestedChange('columns', question.columns.map((c, idx) => idx === i ? val : c));\n    const deleteRow = (i) => handleNestedChange('rows', question.rows.filter((_, idx) => idx !== i));\n    const deleteColumn = (i) => handleNestedChange('columns', question.columns.filter((_, idx) => idx !== i));\n\n    return (\n      <Box sx={{ mt: 2 }}>\n        <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>Grid Rows and Columns</Typography>\n        <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap', mb: 2 }}>\n          <Button onClick={addRow} variant=\"outlined\" size=\"small\" startIcon={<AddIcon />}>Add Row</Button>\n          <Button onClick={addColumn} variant=\"outlined\" size=\"small\" startIcon={<AddIcon />}>Add Column</Button>\n        </Box>\n        <Table size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              {question.columns?.map((col, colIndex) => (\n                <TableCell key={colIndex}>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <TextField\n                      value={col}\n                      onChange={(e) => updateColumn(colIndex, e.target.value)}\n                      size=\"small\"\n                      variant=\"standard\"\n                    />\n                    <Tooltip title=\"Delete Column\"><IconButton size=\"small\" onClick={() => deleteColumn(colIndex)}><DeleteIcon fontSize=\"small\" /></IconButton></Tooltip>\n                  </Box>\n                </TableCell>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {question.rows?.map((row, rowIndex) => (\n              <TableRow key={rowIndex}>\n                <TableCell>\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                    <TextField\n                      value={row}\n                      onChange={(e) => updateRow(rowIndex, e.target.value)}\n                      size=\"small\"\n                      variant=\"standard\"\n                    />\n                    <Tooltip title=\"Delete Row\"><IconButton size=\"small\" onClick={() => deleteRow(rowIndex)}><DeleteIcon fontSize=\"small\" /></IconButton></Tooltip>\n                  </Box>\n                </TableCell>\n                {question.columns?.map((_, colIndex) => (\n                  <TableCell key={colIndex}><input type=\"radio\" disabled /></TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </Box>\n    );\n  };\n\n  const renderRightToolbar = () => (\n    <Box sx={{ position: 'absolute', top: 16, right: 16, display: 'flex', flexDirection: 'column', gap: 1 }}>\n      <Tooltip title=\"Add image\">\n        <IconButton size=\"small\" onClick={() => alert('Add image feature coming soon')}>\n          <ImageIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Add video\">\n        <IconButton size=\"small\" onClick={() => alert('Add video feature coming soon')}>\n          <VideoIcon />\n        </IconButton>\n      </Tooltip>\n      <Tooltip title=\"Add section\">\n        <IconButton size=\"small\" onClick={() => alert('Add section feature coming soon')}>\n          <SectionIcon />\n        </IconButton>\n      </Tooltip>\n    </Box>\n  );\n\n  const renderInputByType = () => {\n    switch (question.type) {\n      case 'short':\n        return (\n          <TextField\n            fullWidth\n            label=\"Short answer text\"\n            placeholder=\"Short answer text\"\n            variant=\"standard\"\n            InputLabelProps={{ shrink: true, style: { color: 'black' } }}\n            sx={{ mb: 2 }}\n            disabled\n          />\n        );\n      case 'paragraph':\n        return (\n          <TextField\n            fullWidth\n            label=\"Long answer text\"\n            placeholder=\"Long answer text\"\n            variant=\"standard\"\n            multiline\n            rows={4}\n            InputLabelProps={{ shrink: true, style: { color: 'black' } }}\n            sx={{ mb: 2 }}\n            disabled\n          />\n        );\n      case 'multiple':\n        return (\n          <Box sx={{ mb: 2 }}>\n            {question.options?.map((option, i) => (\n              <Box key={i} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                <RadioButtonCheckedIcon sx={{ mr: 1 }} />\n                <Typography>{option || `Option ${i + 1}`}</Typography>\n              </Box>\n            ))}\n            <Button size=\"small\" sx={{ textTransform: 'none', color: '#1a73e8' }}>\n              Add option or add \"Other\"\n            </Button>\n          </Box>\n        );\n      case 'checkbox':\n        return (\n          <Box sx={{ mb: 2 }}>\n            {question.options?.map((option, i) => (\n              <Box key={i} sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>\n                <CheckBoxIcon sx={{ mr: 1 }} />\n                <Typography>{option || `Option ${i + 1}`}</Typography>\n              </Box>\n            ))}\n            <Button size=\"small\" sx={{ textTransform: 'none', color: '#1a73e8' }}>\n              Add option or add \"Other\"\n            </Button>\n          </Box>\n        );\n      case 'dropdown':\n        return (\n          <Box sx={{ mb: 2 }}>\n            <select style={{ width: '100%', padding: 8, fontSize: 16, borderRadius: 4, border: '1px solid #ccc' }}>\n              {question.options?.map((option, i) => (\n                <option key={i} value={option || `Option ${i + 1}`}>\n                  {option || `Option ${i + 1}`}\n                </option>\n              ))}\n            </select>\n            <Button size=\"small\" sx={{ textTransform: 'none', color: '#1a73e8', mt: 1 }}>\n              Add option or add \"Other\"\n            </Button>\n          </Box>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Paper\n      onClick={() => onSelect && onSelect(question.id)}\n      sx={{\n        p: 3,\n        mb: 3,\n        position: 'relative',\n        maxWidth: 900,\n        mx: 'auto',\n        boxShadow: selected ? '0 0 10px rgba(103, 58, 183, 0.5)' : '0 1px 3px rgba(0,0,0,0.2)',\n        borderRadius: 4,\n        borderLeft: selected ? '6px solid #673ab7' : 'none',\n        cursor: 'pointer',\n        backgroundColor: selected ? '#f3e5f5' : '#fff',\n        transition: 'all 0.3s ease',\n        color: selected ? '#673ab7' : 'rgba(0, 0, 0, 0.87)',  // Change font color of the card box\n      }}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n        <DragIcon sx={{ color: 'text.secondary', mr: 2, cursor: 'move' }} />\n        <Typography variant=\"h5\" color=\"text.primary\" sx={{ mr: 2, fontWeight: 'bold' }}>{index + 1}</Typography>\n        <Button\n          variant=\"outlined\"\n          onClick={handleMenuOpen}\n          sx={{ minWidth: 180, mr: 3, justifyContent: 'space-between', textTransform: 'none' }}\n          endIcon={<ArrowDropDownCircleIcon />}\n        >\n          {questionTypesGrouped.flatMap(group => group.types).find(t => t.value === question.type)?.label || 'Select type'}\n        </Button>\n        <Menu\n          anchorEl={anchorEl}\n          open={open}\n          onClose={handleMenuClose}\n          PaperProps={{\n            style: {\n              maxHeight: 48 * 6,\n              width: '25ch',\n            },\n          }}\n        >\n          {questionTypesGrouped.map((group, groupIndex) => (\n            <div key={groupIndex}>\n              {group.types.map((type) => (\n                <MenuItem\n                  key={type.value}\n                  selected={type.value === question.type}\n                  onClick={() => handleTypeChange(type.value)}\n                >\n                  <ListItemIcon>{type.icon}</ListItemIcon>\n                  <ListItemText>{type.label}</ListItemText>\n                  {type.isNew && (\n                    <Box\n                      component=\"span\"\n                      sx={{\n                        ml: 1,\n                        bgcolor: '#673ab7',\n                        color: 'white',\n                        borderRadius: '4px',\n                        px: 0.5,\n                        fontSize: '0.75rem',\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      New\n                    </Box>\n                  )}\n                </MenuItem>\n              ))}\n              {groupIndex < questionTypesGrouped.length - 1 && <hr style={{ margin: '4px 0' }} />}\n            </div>\n          ))}\n        </Menu>\n        <Box sx={{ ml: 'auto' }}>\n          <Tooltip title=\"Duplicate Question\">\n            <IconButton size=\"medium\" onClick={onDuplicate} sx={{ mr: 2 }}>\n              <DuplicateIcon fontSize=\"medium\" />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Delete Question\">\n            <IconButton size=\"medium\" onClick={onDelete} color=\"error\">\n              <DeleteIcon fontSize=\"medium\" />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n      <TextField\n        fullWidth\n        label=\"Question\"\n        value={question.title}\n        onChange={(e) => handleChange('title', e.target.value)}\n        sx={{ mb: 2, input: { color: 'black', fontWeight: 'bold', fontSize: '1.1rem' } }}\n        variant=\"standard\"\n        InputLabelProps={{ shrink: true, style: { color: 'black', fontWeight: 'bold', fontSize: '1.1rem' } }}\n        placeholder=\"Untitled Question\"\n      />\n      <TextField\n        fullWidth\n        label=\"Description\"\n        value={question.description || ''}\n        onChange={(e) => handleChange('description', e.target.value)}\n        size=\"medium\"\n        sx={{ mb: 3, textarea: { color: 'black', fontWeight: 'normal', fontSize: '1rem' } }}\n        multiline\n        maxRows={4}\n        variant=\"standard\"\n        InputLabelProps={{ shrink: true, style: { color: 'black', fontWeight: 'normal', fontSize: '1rem' } }}\n        placeholder=\"Description (optional)\"\n      />\n\n      {renderInputByType()}\n\n      <Box sx={{ mt: 3 }}>\n          <FormControlLabel\n            control={\n              <MuiSwitch\n                checked={question.required}\n                onChange={(e) => handleChange('required', e.target.checked)}\n                size=\"small\"\n              />\n            }\n            label=\"Required\"\n            sx={{ fontWeight: 'bold' }}\n          />\n      </Box>\n    </Paper>\n  );\n}\n\nexport default QuestionCard;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  TextField,\n  Tabs,\n  Tab,\n  FormControlLabel,\n  Switch as MuiSwitch,\n  Select,\n  MenuItem,\n} from '@mui/material';\nimport { Add } from '@mui/icons-material';\nimport QuestionCard from '../components/QuestionCard';\nimport { masterDataService, formService } from '../services/api';\nimport { useParams, useNavigate } from 'react-router-dom';\n\nconst FormBuilderNew = ({ setShareLink = () => {} }) => {\n  const { formId } = useParams();\n  const navigate = useNavigate();\n\n  const [tabIndex, setTabIndex] = useState(0);\n  const [formTitle, setFormTitle] = useState('');\n  const [formDescription, setFormDescription] = useState('');\n  const [questions, setQuestions] = useState([]);\n\n  const [levels, setLevels] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [designations, setDesignations] = useState([]);\n\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  const [selectedDepartments, setSelectedDepartments] = useState([]);\n  const [selectedDesignations, setSelectedDesignations] = useState([]);\n\n  const [tempSelectedLevels, setTempSelectedLevels] = useState([]);\n  const [tempSelectedDepartments, setTempSelectedDepartments] = useState([]);\n  const [tempSelectedDesignations, setTempSelectedDesignations] = useState([]);\n\n  const [filteredDepartments, setFilteredDepartments] = useState([]);\n  const [filteredDesignations, setFilteredDesignations] = useState([]);\n\n  const [levelToDepartmentsMap, setLevelToDepartmentsMap] = useState({});\n  const [levelToDesignationsMap, setLevelToDesignationsMap] = useState({});\n\n  const [selectionDone, setSelectionDone] = useState(false);\n  const [selectionConfirmed, setSelectionConfirmed] = useState(false);\n\n  const [submitLoading, setSubmitLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const isEditMode = Boolean(formId);\n\n  // Fetch master data on mount\n  useEffect(() => {\n    const fetchMasterData = async () => {\n      try {\n        const [levelsData, departmentsData, designationsData] = await Promise.all([\n          masterDataService.getLevels(),\n          masterDataService.getDepartments(),\n          masterDataService.getDesignations(),\n        ]);\n        setLevels(levelsData);\n        setDepartments(departmentsData);\n        setDesignations(designationsData);\n        setFilteredDepartments(departmentsData);\n        setFilteredDesignations(designationsData);\n\n        // Build level to departments map\n        const lvlDeptMap = {};\n        departmentsData.forEach((dept) => {\n          const key = dept.levelCategory;\n          if (key) {\n            if (!lvlDeptMap[key]) lvlDeptMap[key] = [];\n            lvlDeptMap[key].push(dept);\n          }\n        });\n        setLevelToDepartmentsMap(lvlDeptMap);\n\n        // Build level to designations map\n        const lvlDesigMap = {};\n        designationsData.forEach((desig) => {\n          const key = desig.levelId || desig.level_id || desig.level;\n          if (key) {\n            if (!lvlDesigMap[key]) lvlDesigMap[key] = [];\n            lvlDesigMap[key].push(desig);\n          }\n        });\n        setLevelToDesignationsMap(lvlDesigMap);\n      } catch (err) {\n        console.error('Error fetching master data:', err);\n        setError('Failed to load master data');\n      }\n    };\n    fetchMasterData();\n  }, []);\n\n  // Fetch form data if editing\n  useEffect(() => {\n    if (isEditMode) {\n      const fetchForm = async () => {\n        try {\n          const form = await formService.getFormById(formId);\n          setFormTitle(form.title || '');\n          setFormDescription(form.description || '');\n          setQuestions(form.questions || []);\n          setSelectedLevels(form.targetLevels || []);\n          setSelectedDepartments(form.targetDepartments || []);\n          setSelectedDesignations(form.targetDesignations || []);\n\n          setTempSelectedLevels(form.targetLevels || []);\n          setTempSelectedDepartments(form.targetDepartments || []);\n          setTempSelectedDesignations(form.targetDesignations || []);\n\n          setSelectionDone(true);\n          setSelectionConfirmed(true);\n        } catch (err) {\n          console.error('Failed to fetch form:', err);\n          setError('Failed to load form data');\n        }\n      };\n      fetchForm();\n    }\n  }, [formId, isEditMode]);\n\n  // Update filtered departments and designations when tempSelectedLevels changes\n  useEffect(() => {\n    if (tempSelectedLevels.length === 0) {\n      setFilteredDepartments(departments);\n      setFilteredDesignations(designations);\n    } else {\n      const selectedLevelNames = tempSelectedLevels\n        .map((levelId) => {\n          const lvl = levels.find((l) => l.level_id === levelId);\n          return lvl ? lvl.name : null;\n        })\n        .filter(Boolean);\n\n      const filteredDepts = selectedLevelNames.flatMap(\n        (levelName) => levelToDepartmentsMap[levelName] || []\n      );\n      const filteredDesigs = tempSelectedLevels.flatMap(\n        (levelId) => levelToDesignationsMap[levelId] || []\n      );\n\n      setFilteredDepartments(filteredDepts);\n      setFilteredDesignations(filteredDesigs);\n    }\n  }, [tempSelectedLevels, departments, designations, levels, levelToDepartmentsMap, levelToDesignationsMap]);\n\n  // Toggle functions for temp selections\n  const toggleTempLevel = (id) => {\n    setTempSelectedLevels((prev) =>\n      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]\n    );\n  };\n  const toggleTempDepartment = (id) => {\n    setTempSelectedDepartments((prev) =>\n      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]\n    );\n  };\n  const toggleTempDesignation = (id) => {\n    setTempSelectedDesignations((prev) =>\n      prev.includes(id) ? prev.filter((i) => i !== id) : [...prev, id]\n    );\n  };\n\n  const handleDoneSelection = () => {\n    setSelectedLevels(tempSelectedLevels);\n    setSelectedDepartments(tempSelectedDepartments);\n    setSelectedDesignations(tempSelectedDesignations);\n    setSelectionDone(true);\n  };\n\n  const handleConfirmSelection = () => {\n    if (selectedLevels.length === 0) {\n      alert('Please select at least one level.');\n      return;\n    }\n    setSelectionConfirmed(true);\n  };\n\n  // Question management\n  const addQuestion = () => {\n    const newQuestion = {\n      id: Date.now(),\n      title: '',\n      type: 'text',\n      options: [],\n      required: false,\n    };\n    setQuestions((prev) => [...prev, newQuestion]);\n  };\n\n  const updateQuestion = (index, updatedQuestion) => {\n    setQuestions((prev) => {\n      const newQuestions = [...prev];\n      newQuestions[index] = updatedQuestion;\n      return newQuestions;\n    });\n  };\n\n  const deleteQuestion = (id) => {\n    setQuestions((prev) => prev.filter((q) => q.id !== id));\n  };\n\n  const handleTabChange = (event, newValue) => {\n    setTabIndex(newValue);\n  };\n\n  // Validation helper\n  const validateForm = () => {\n    if (!formTitle.trim()) {\n      alert('Form title is required');\n      return false;\n    }\n    if (formTitle.length > 200) {\n      alert('Form title must be at most 200 characters');\n      return false;\n    }\n    if (questions.length === 0) {\n      alert('Form must contain at least one question');\n      return false;\n    }\n    for (const q of questions) {\n      if (!q.title.trim()) {\n        alert('Each question must have a title');\n        return false;\n      }\n      if (q.title.length > 500) {\n        alert('Question title must be at most 500 characters');\n        return false;\n      }\n      const validTypes = [\n        'short',\n        'paragraph',\n        'multiple',\n        'checkbox',\n        'dropdown',\n        'linear',\n        'grid',\n        'email',\n        'number',\n        'phone',\n        'url',\n      ];\n      if (!validTypes.includes(q.type)) {\n        alert('Each question must have a valid type');\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Submit handler\n  const handleSubmitForm = async () => {\n    if (!validateForm()) return;\n\n    setSubmitLoading(true);\n    setError(null);\n\n    const creatorId = localStorage.getItem('userId') || 'default-creator-id';\n    const formData = {\n      title: formTitle,\n      description: formDescription,\n      questions,\n      createdBy: creatorId,\n      isPublished: true,\n      targetLevels: selectedLevels,\n      targetDepartments: selectedDepartments,\n      targetDesignations: selectedDesignations,\n    };\n\n    try {\n      if (isEditMode) {\n        await formService.updateForm(formId, formData);\n        alert('Form updated successfully!');\n        navigate('/total-forms');\n      } else {\n        const response = await formService.createForm(formData);\n        const newFormId = response._id || response.id;\n        try {\n          await formService.publishForm(newFormId, true);\n        } catch (err) {\n          alert('Failed to publish form: ' + err);\n        }\n        const link = `${window.location.origin}/form/${newFormId}`;\n        alert('Form created successfully! Share this link: ' + link);\n        setShareLink(link);\n      }\n    } catch (err) {\n      console.error('Failed to save form:', err);\n      alert('Failed to save form: ' + (err.message || err));\n      setError('Failed to save form');\n    } finally {\n      setSubmitLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        bgcolor: '#f8f8f8',\n        minHeight: '100vh',\n        margin: 0,\n        padding: 0,\n        boxSizing: 'border-box',\n        fontFamily: \"'Roboto', sans-serif\",\n        color: 'black',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        overflowX: 'hidden',\n      }}\n    >\n      <Tabs\n        value={tabIndex}\n        onChange={handleTabChange}\n        centered\n        sx={{\n          bgcolor: '#f3e5f5',\n          borderBottom: '3px solid #673ab7',\n          '& .MuiTabs-indicator': {\n            backgroundColor: '#673ab7',\n            height: 4,\n            borderRadius: 2,\n          },\n          fontWeight: 'bold',\n          fontSize: 16,\n          color: 'black',\n          '& .MuiTab-root': {\n            color: 'black',\n          },\n          '& .Mui-selected': {\n            color: 'black',\n          },\n        }}\n      >\n        <Tab label=\"Questions\" sx={{ textTransform: 'none', px: 3 }} />\n        <Tab label=\"Responses\" sx={{ textTransform: 'none', px: 3 }} />\n        <Tab label=\"Settings\" sx={{ textTransform: 'none', px: 3 }} />\n      </Tabs>\n\n      {error && (\n        <Typography color=\"error\" sx={{ mt: 2, mb: 2 }}>\n          {error}\n        </Typography>\n      )}\n\n      {tabIndex === 0 && (\n        <Box sx={{ width: '100%', mx: 'auto', mb: 6 }}>\n          {!selectionDone ? (\n            <>\n              <Box sx={{ display: 'flex', gap: 3, mb: 3 }}>\n                <Box\n                  sx={{\n                    flex: 1,\n                    bgcolor: '#fff',\n                    p: 2,\n                    borderRadius: 2,\n                    border: '1px solid #ddd',\n                    maxHeight: 200,\n                    overflowY: 'auto',\n                  }}\n                >\n                  <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                    Levels\n                  </Typography>\n                  {levels.length === 0 ? (\n                    <Typography>No levels found.</Typography>\n                  ) : (\n                    levels.map((level) => (\n                      <FormControlLabel\n                        key={level.level_id}\n                        sx={{ display: 'block' }}\n                        control={\n                          <input\n                            type=\"checkbox\"\n                            checked={tempSelectedLevels.includes(level.level_id)}\n                            onChange={() => toggleTempLevel(level.level_id)}\n                          />\n                        }\n                        label={level.name}\n                      />\n                    ))\n                  )}\n                </Box>\n                {tempSelectedLevels.length > 0 && (\n                  <>\n                    <Box\n                      sx={{\n                        flex: 1,\n                        bgcolor: '#fff',\n                        p: 2,\n                        borderRadius: 2,\n                        border: '1px solid #ddd',\n                        maxHeight: 200,\n                        overflowY: 'auto',\n                      }}\n                    >\n                      <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Departments\n                      </Typography>\n                      {filteredDepartments.length === 0 ? (\n                        <Typography>No departments found.</Typography>\n                      ) : (\n                        filteredDepartments.map((dept) => (\n                          <FormControlLabel\n                            key={dept.dept_id}\n                            sx={{ display: 'block' }}\n                            control={\n                              <input\n                                type=\"checkbox\"\n                                checked={tempSelectedDepartments.includes(dept.dept_id)}\n                                onChange={() => toggleTempDepartment(dept.dept_id)}\n                              />\n                            }\n                            label={dept.name}\n                          />\n                        ))\n                      )}\n                    </Box>\n                    <Box\n                      sx={{\n                        flex: 1,\n                        bgcolor: '#fff',\n                        p: 2,\n                        borderRadius: 2,\n                        border: '1px solid #ddd',\n                        maxHeight: 200,\n                        overflowY: 'auto',\n                      }}\n                    >\n                      <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        Designations\n                      </Typography>\n                      {filteredDesignations.length === 0 ? (\n                        <Typography>No designations found.</Typography>\n                      ) : (\n                        filteredDesignations.map((desig) => (\n                          <FormControlLabel\n                            key={desig.desig_id}\n                            sx={{ display: 'block' }}\n                            control={\n                              <input\n                                type=\"checkbox\"\n                                checked={tempSelectedDesignations.includes(desig.desig_id)}\n                                onChange={() => toggleTempDesignation(desig.desig_id)}\n                              />\n                            }\n                            label={desig.name}\n                          />\n                        ))\n                      )}\n                    </Box>\n                  </>\n                )}\n              </Box>\n              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 3 }}>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleDoneSelection}\n                  disabled={tempSelectedLevels.length === 0}\n                >\n                  Done\n                </Button>\n              </Box>\n            </>\n          ) : (\n            <>\n              <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                Selected Summary\n              </Typography>\n              <Box sx={{ mb: 3, overflowX: 'auto' }}>\n                <table style={{ width: '100%', borderCollapse: 'collapse', border: '1px solid #ddd' }}>\n                  <thead>\n                    <tr>\n                      <th style={{ border: '1px solid #ddd', padding: '8px' }}>Type</th>\n                      <th style={{ border: '1px solid #ddd', padding: '8px' }}>Name</th>\n                      <th style={{ border: '1px solid #ddd', padding: '8px' }}>Action</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {selectedLevels.map((levelId) => {\n                      const level = levels.find((lvl) => lvl.level_id === levelId);\n                      return (\n                        <tr key={`level-${levelId}`}>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>Level</td>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>{level ? level.name : levelId}</td>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              onClick={() => setSelectedLevels(selectedLevels.filter((id) => id !== levelId))}\n                            >\n                              Remove\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                    {selectedDesignations.map((desigId) => {\n                      const desig = designations.find((d) => d.desig_id === desigId);\n                      return (\n                        <tr key={`desig-${desigId}`}>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>Designation</td>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>{desig ? desig.name : desigId}</td>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              onClick={() => setSelectedDesignations(selectedDesignations.filter((id) => id !== desigId))}\n                            >\n                              Remove\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                    {selectedDepartments.map((deptId) => {\n                      const dept = departments.find((d) => d.dept_id === deptId);\n                      return (\n                        <tr key={`dept-${deptId}`}>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>Department</td>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>{dept ? dept.name : deptId}</td>\n                          <td style={{ border: '1px solid #ddd', padding: '8px' }}>\n                            <Button\n                              size=\"small\"\n                              variant=\"outlined\"\n                              onClick={() => setSelectedDepartments(selectedDepartments.filter((id) => id !== deptId))}\n                            >\n                              Remove\n                            </Button>\n                          </td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                </table>\n              </Box>\n              <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 3 }}>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleConfirmSelection}>\n                  Confirm\n                </Button>\n                <Button\n                  variant=\"outlined\"\n                  sx={{ ml: 2 }}\n                  onClick={() => {\n                    setSelectionDone(false);\n                    setSelectionConfirmed(false);\n                  }}\n                >\n                  Edit\n                </Button>\n              </Box>\n            </>\n          )}\n\n          {selectionConfirmed && (\n            <>\n              <Box\n                sx={{\n                  mb: 4,\n                  p: 3,\n                  border: '1px solid #ddd',\n                  borderRadius: 4,\n                  bgcolor: '#fff',\n                }}\n              >\n                <TextField\n                  fullWidth\n                  variant=\"standard\"\n                  placeholder=\"Untitled form\"\n                  value={formTitle}\n                  onChange={(e) => setFormTitle(e.target.value)}\n                  InputProps={{\n                    disableUnderline: true,\n                    style: { color: 'black', fontSize: 28, fontWeight: 'bold' },\n                  }}\n                  sx={{ mb: 1 }}\n                />\n                <TextField\n                  fullWidth\n                  variant=\"standard\"\n                  placeholder=\"Form description\"\n                  value={formDescription}\n                  onChange={(e) => setFormDescription(e.target.value)}\n                  InputProps={{ disableUnderline: true, style: { color: 'black', fontSize: 16 } }}\n                  multiline\n                  sx={{ mb: 1 }}\n                />\n              </Box>\n\n              <Button variant=\"outlined\" startIcon={<Add />} sx={{ mb: 2, ml: 3 }} onClick={addQuestion}>\n                Add question\n              </Button>\n\n              {questions.map((question, idx) => (\n                <QuestionCard\n                  key={question.id}\n                  question={question}\n                  index={idx}\n                  onUpdate={(updatedQuestion) => updateQuestion(idx, updatedQuestion)}\n                  onDelete={() => deleteQuestion(question.id)}\n                  onDuplicate={() => {\n                    const newQuestion = { ...question, id: Date.now() };\n                    setQuestions([...questions, newQuestion]);\n                  }}\n                />\n              ))}\n\n              <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitForm} disabled={submitLoading}>\n                  {submitLoading ? 'Saving...' : isEditMode ? 'Save Changes' : 'Submit Form'}\n                </Button>\n              </Box>\n            </>\n          )}\n        </Box>\n      )}\n\n      {tabIndex === 1 && (\n        <Box sx={{ width: '100%', mx: 'auto', p: 3, color: 'black' }}>\n          <Typography variant=\"h5\" sx={{ mb: 2 }}>\n            Responses\n          </Typography>\n          <Typography>This section is under construction.</Typography>\n        </Box>\n      )}\n\n      {tabIndex === 2 && (\n        <Box sx={{ width: '100%', mx: 'auto', p: 3, color: 'black' }}>\n          <Typography variant=\"h5\" sx={{ mb: 3, fontWeight: 'bold' }}>\n            Settings\n          </Typography>\n\n          <Box sx={{ mb: 3, p: 2, border: '1px solid #ddd', borderRadius: 1, color: 'black' }}>\n            <Typography sx={{ fontWeight: 'bold', mb: 1, color: 'black' }}>Departments</Typography>\n            {departments.length === 0 ? (\n              <Typography>No departments found.</Typography>\n            ) : (\n              <ul>\n                {departments.map((dept) => (\n                  <li key={dept.dept_id}>\n                    {dept.name} (Level Category: {dept.levelCategory})\n                  </li>\n                ))}\n              </ul>\n            )}\n          </Box>\n\n          <Box sx={{ mb: 3, p: 2, border: '1px solid #ddd', borderRadius: 1, color: 'black' }}>\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n              <Typography sx={{ fontWeight: 'bold' }}>Make this a quiz</Typography>\n              <MuiSwitch />\n            </Box>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Assign point values, set answers, and automatically provide feedback\n            </Typography>\n          </Box>\n\n          <Box sx={{ mb: 3, p: 2, border: '1px solid #ddd', borderRadius: 1, color: 'black' }}>\n            <Typography sx={{ fontWeight: 'bold', mb: 1, color: 'black' }}>Responses</Typography>\n            <Typography variant=\"body2\" sx={{ mb: 2, color: 'black' }} component=\"div\">\n              Manage how responses are collected and protected\n            </Typography>\n\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n              <Box>\n                <Typography sx={{ fontWeight: 'bold' }}>Collect email addresses</Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" component=\"div\">\n                  Respondents will be required to sign in to Google\n                </Typography>\n              </Box>\n              <Box sx={{ minWidth: 120 }}>\n                <Select\n                  size=\"small\"\n                  defaultValue=\"Verified\"\n                  fullWidth\n                  sx={{ backgroundColor: 'black', color: 'white', '& .MuiSelect-icon': { color: 'white' } }}\n                >\n                  <MenuItem value=\"Verified\" sx={{ color: 'black' }}>Verified</MenuItem>\n                  <MenuItem value=\"Unverified\" sx={{ color: 'black' }}>Unverified</MenuItem>\n                </Select>\n              </Box>\n            </Box>\n\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n              <Typography sx={{ fontWeight: 'bold' }}>Send responders a copy of their response</Typography>\n              <Box sx={{ minWidth: 120 }}>\n                <Select size=\"small\" defaultValue=\"Off\" fullWidth>\n                  <MenuItem value=\"Off\">Off</MenuItem>\n                  <MenuItem value=\"On\">On</MenuItem>\n                </Select>\n              </Box>\n            </Box>\n\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n              <Typography sx={{ fontWeight: 'bold' }}>Allow response editing</Typography>\n              <MuiSwitch />\n            </Box>\n\n            <Typography variant=\"overline\" color=\"text.secondary\" sx={{ mb: 1 }}>\n              REQUIRES SIGN IN\n            </Typography>\n\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n              <Typography sx={{ fontWeight: 'bold' }}>Limit to 1 response</Typography>\n              <MuiSwitch />\n            </Box>\n          </Box>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default FormBuilderNew;\n","import React from 'react';\nimport FormBuilderNew from './FormBuilderNew';\n\nexport default function FormBuilder(props) {\n  return <FormBuilderNew {...props} />;\n}\n"],"names":["questionTypesGrouped","groupName","types","value","label","icon","_jsx","ShortTextIcon","fontSize","SubjectIcon","RadioButtonCheckedIcon","CheckBoxIcon","ArrowDropDownCircleIcon","CloudUploadIcon","LinearScaleIcon","StarBorderIcon","isNew","GridViewIcon","CalendarTodayIcon","AccessTimeIcon","_ref","_questionTypesGrouped","question","index","onUpdate","onDelete","onDuplicate","selected","onSelect","anchorEl","setAnchorEl","useState","open","Boolean","handleMenuClose","handleChange","field","_jsxs","Paper","onClick","id","sx","p","mb","position","maxWidth","mx","boxShadow","borderRadius","borderLeft","cursor","backgroundColor","transition","color","children","Box","display","alignItems","DragIcon","mr","Typography","variant","fontWeight","Button","event","currentTarget","minWidth","justifyContent","textTransform","endIcon","flatMap","group","find","t","type","Menu","onClose","PaperProps","style","maxHeight","width","map","groupIndex","MenuItem","handleTypeChange","console","log","ListItemIcon","ListItemText","component","ml","bgcolor","px","length","margin","Tooltip","title","IconButton","size","DuplicateIcon","DeleteIcon","TextField","fullWidth","onChange","e","target","input","InputLabelProps","shrink","placeholder","description","textarea","multiline","maxRows","renderInputByType","_question$options2","_question$options3","_question$options4","disabled","rows","options","option","i","padding","border","mt","FormControlLabel","control","MuiSwitch","checked","required","setShareLink","formId","useParams","navigate","useNavigate","tabIndex","setTabIndex","formTitle","setFormTitle","formDescription","setFormDescription","questions","setQuestions","levels","setLevels","departments","setDepartments","designations","setDesignations","selectedLevels","setSelectedLevels","selectedDepartments","setSelectedDepartments","selectedDesignations","setSelectedDesignations","tempSelectedLevels","setTempSelectedLevels","tempSelectedDepartments","setTempSelectedDepartments","tempSelectedDesignations","setTempSelectedDesignations","filteredDepartments","setFilteredDepartments","filteredDesignations","setFilteredDesignations","levelToDepartmentsMap","setLevelToDepartmentsMap","levelToDesignationsMap","setLevelToDesignationsMap","selectionDone","setSelectionDone","selectionConfirmed","setSelectionConfirmed","submitLoading","setSubmitLoading","error","setError","isEditMode","useEffect","async","levelsData","departmentsData","designationsData","Promise","all","masterDataService","getLevels","getDepartments","getDesignations","lvlDeptMap","forEach","dept","key","levelCategory","push","lvlDesigMap","desig","levelId","level_id","level","err","fetchMasterData","form","formService","getFormById","targetLevels","targetDepartments","targetDesignations","fetchForm","filteredDepts","lvl","l","name","filter","levelName","filteredDesigs","minHeight","boxSizing","fontFamily","flexDirection","height","overflowX","Tabs","handleTabChange","newValue","centered","borderBottom","Tab","_Fragment","borderCollapse","desigId","d","desig_id","deptId","dept_id","handleConfirmSelection","alert","gap","flex","overflowY","includes","toggleTempLevel","prev","toggleTempDepartment","toggleTempDesignation","handleDoneSelection","InputProps","disableUnderline","startIcon","Add","addQuestion","newQuestion","Date","now","idx","QuestionCard","updatedQuestion","updateQuestion","newQuestions","deleteQuestion","q","validateForm","trim","creatorId","localStorage","getItem","formData","createdBy","isPublished","updateForm","response","createForm","newFormId","_id","publishForm","link","window","location","origin","message","Select","defaultValue","FormBuilder","props","FormBuilderNew"],"sourceRoot":""}